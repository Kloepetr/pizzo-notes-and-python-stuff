# -*- coding: utf-8 -*-
"""pccc8-2023-03-02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HLyoBRM3S6wS695lVDvtEuBGhUnF2X9u

# FUNCTIONS
---

### Defining a Function
- Passing Information to a Function
- Arguments and Parameters
"""

# example
def greet_user():
    print('hello')
greet_user()

# Passing Information to a Function
def greet_user(username):
    print(f'hello {username.title()}')
greet_user('emma')

"""### TRY IT YOURSELF
---

**8-1. Message:**   
Write a function called `display_message()` that prints one sentence telling everyone what you are learning about in this chapter. Call the function, and make sure the message displays correctly.
"""

# example
def display_message():
  print("hey im learning about functions")

display_message()

"""**8-2. Favorite Book:**    
Write a function called `favorite_book()` that accepts one parameter, title. The function should print a message, such as *One of my favorite books is Alice in Wonderland*. Call the function, making sure to include a book title as an argument in the function call.
"""

# Passing Information to a Function
def favorite_book(book):
    print(f'one of my favorite book is {book.title()}')
favorite_book('jojo the bizarre journey')

"""### Passing Arguments
---
- Positional Arguments
- Multiple Function Calls
- Order Matters in Positional Arguments
- Keyword Arguments
- Default Values
- Equivalent Function Calls
- Avoiding Argument Errors
"""

# Positional Arguments
def describe_pet(type, name):
    print(f'I have a {type}')
    print(f"\nMy {type}'s name is {name.title()}")
describe_pet('hamster', 'bob')

# Multiple Function Calls
def describe_pet(type, name):
    print(f'I have a {type}')
    print(f"\nMy {type}'s name is {name.title()}")
describe_pet('hamster', 'bob')
describe_pet('dog', 'fido')

# Order Matters in Positional Arguments
def describe_pet(type, name):
    print(f'I have a {type}')
    print(f"\nMy {type}'s name is {name.title()}")
describe_pet('bob', 'hamster')
describe_pet('fido', 'dog')

# Keyword Arguments n/a

# Default Values n/a

# Equivalent Function Calls n/a

# Avoiding Argument Errors

"""### TRY IT YOURSELF
---

**8-3. T-Shirt:**   
Write a function called `make_shirt()` that accepts a size and the text of a message that should be printed on the shirt. The function should print a sentence summarizing the size of the shirt and the message printed on it.   
Call the function once using positional arguments to make a shirt. Call the function a second time using keyword arguments.
"""

# code
def make_shirt(size, message):
    print(f'I want a {size}')
    print(f"My {size} shirt saids {message.title()}")

make_shirt('big', 'hamster')
make_shirt('small', 'dog')

"""**8-5. Cities:**   
Write a function called `describe_city()` that accepts the name of a city and its country. The function should print a simple sentence, such as *Reykjavik is in Iceland*. Give the parameter for the country a default value. Call your function for three different cities, at least one of which is not in the default country.
"""

# code
def describe_city(city, country):
    print(f'I want to visit {city}')
    print(f" {city} is in {country.title()}")

describe_city('tokyo', 'Japan')
describe_city('kyoto', 'Japan')
describe_city('Osaka', 'Japan')
describe_city('new york ', 'America')

"""### Return Values
---
- Returning a Simple Value
- Making an Argument Optional
- Returning a Dictionary
- Using a Function with a `while` Loop
"""

# Returning a Simple Value
def get_formatted_name(first_name, last_name):
    full_name = f"{first_name} {last_name}"
    return full_name.title()
musician = get_formatted_name('selina', 'gomez')
print(musician)

# Making an Argument Optional n/a

# Returning a Dictionary
def build_person(first_name, last_name):
    person = {'first': first_name, 'last': last_name}
    return person
musician = build_person('jimi', 'hendrix')
print(musician)

# Using a Function with a while Loop
def get_formatted_name(first_name, last_name):
    full_name = f"{first_name} {last_name}"
    return full_name.title()

while True:
    print("\nPlease tell me your name:")
    print("(enter 'q' at any time to quit)")
    f_name = input('First name: ')
    if f_name == 'q':
        break
    l_name = input('Last name: ')
    if l_name == 'q':
        break

    formatted_name = get_formatted_name(f_name, l_name)
    print(f"\nHello, {formatted_name}")

"""### TRY IT YOURSELF
---

**8-6. City Names:**   
Write a function called `city_country()` that takes in the name of a city and its country. The function should return a string formatted like this:   

        "Santiago, Chile"
        
Call your function with at least three city-country pairs, and print the values that are returned.
"""

# code
def city_country(city, country):
    return f"{city.title()}, {country.title()}"
print(city_country('Santiago', 'Chile'))

"""**8-7. Album:**   
Write a function called `make_album()` that builds a dictionary describing a music album. The function should take in an artist name and an album title, and it should return a dictionary containing these two pieces of information. Use the function to make three dictionaries representing different albums. Print each return value to show that the dictionaries are storing the album information correctly.   
Use `None` to add an optional parameter to `make_album()` that allows you to store the number of songs on an album. If the calling line includes a value for the number of songs, add that value to the album’s dictionary. Make at least one new function call that includes the number of songs on an album.
"""

# code
def make_album(artist_name, album_title, number_of_songs=None):
    album = {'artist': artist_name, 'title': album_title}
    if number_of_songs:
        album['number_of_songs'] = number_of_songs
    return album
album1 = make_album('The Beatles', 'Abbey Road')
album2 = make_album('Led Zeppelin', 'IV')
album3 = make_album('Pink Floyd', 'The Wall', 26)

print(album1)
print(album2)
print(album3)

"""**8-8. User Albums:**   
Start with your program from Exercise 8-7. Write a `while` loop that allows users to enter an album’s artist and title. Once you have that information, call `make_album()` with the user’s input and print the dictionary that’s created. Be sure to include a quit value in the `while` loop.
"""

# code
def make_album(artist_name, album_title, number_of_songs=None):
    album = {'artist': artist_name, 'title': album_title}
    if number_of_songs:
        album['number_of_songs'] = number_of_songs
    return album

while True:
    print("Enter the artist name and album title (enter 'q' to quit):")
    artist_name = input("Artist name: ")
    if artist_name == 'q':
        break
    album_title = input("Album title: ")
    if album_title == 'q':
        break

    album = make_album(artist_name, album_title)
    print(album)

"""### Passing a List
---
- Modifying a List in a Function
- Preventing a Function from Modifying a List
"""

# Modifying a List in a Function
def greet_users(names):
    for name in names:
        msg = f'Hello, {name.title()}!'
        print(msg)
usernames = ['clive', 'leo', 'kiefer', 'emma', 'rebekah']
greet_users(usernames)

# Preventing a Function from Modifying a List
def print_models(unprinted_designs, completed_models):
    """   describe function here
            parameter1 ...
            parameter2 ...
            return value
    """
    while unprinted_designs:
        current_design = unprinted_designs.pop()
        print(f"Printing model: {current_design}")
        completed_models.append(current_design)

def show_completed_models(completed_models):
    print("\nThe following models have been printed:")
    for completed_model in completed_models:
        print(completed_model)
unprinted_designs = ['phone case', 'robot pendant', 'dodecahedron']
completed_models = []
print_models(unprinted_designs[:], completed_models)
show_completed_models(completed_models)

"""### TRY IT YOURSELF
---

**8-9. Messages:**   
Make a list containing a series of short text messages. Pass the list to a function called `show_messages()`, which prints each text message.
"""

# code
def show_messages(messages):
    for message in messages:
        print(message)
messages = [
    "Hello, how are you?",
    "how are you"
]

show_messages(messages)

"""**8-10. Sending Messages:**   
Start with a copy of your program from Exercise 8-9. Write a function called `send_messages()` that prints each text message and moves each message to a new list called `sent_messages` as it’s printed. After calling the function, print both of your lists to make sure the messages were moved correctly.
"""

# code
def show_messages(messages):
    for message in messages:
        print(message)

def send_messages(messages, sent_messages):
    while messages:
        current_message = messages.pop()
        print(current_message)
        sent_messages.append(current_message)

messages = ["hello, how are you", "how are you?", "good"]
show_messages(messages)

sent_messages = []
send_messages(messages, sent_messages)

print(send_messages)

"""**8-11. Archived Messages:**   
Start with your work from Exercise 8-10. Call the function `send_messages()` with a copy of the list of messages. After calling the function, print both of your lists to show that the original list has retained its messages.
"""

# code
