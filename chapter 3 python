{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNPDOZ02+Zmi7PHE70IETTy",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Kloepetr/python-beginner-mini-projects/blob/main/chapter%203%20python\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I7Y5W3dblQgT",
        "outputId": "04c62e62-c8cf-4c29-8a93-b45e0bc42a67"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['pop', 'rock', 'rap', 'indie']\n"
          ]
        }
      ],
      "source": [
        "genres = ['pop', 'rock', 'rap', 'indie']\n",
        "print(genres)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(genres[0])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ThUVuQoxnQhA",
        "outputId": "0460c267-5e31-4810-cf1d-309991e485b2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "pop\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(genres[0].title())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Kf7uWYEHnYSw",
        "outputId": "07ce3aeb-d684-44c6-8310-8e123ca11091"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Pop\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# \"genres\" is considered an element in this case\n",
        "print(genres[1])\n",
        "print(genres[3])\n",
        "print(genres[-1])\n",
        "# wrap in f string (curly braces ???)\n",
        "message = f'My favorite genre is {genres[0]}'\n",
        "\n"
      ],
      "metadata": {
        "id": "2k6C1eo6nx5m"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "genres[0] = 'edm'\n",
        "#append puts variable at the end of the list\n",
        "genres = []\n",
        "genres.append('edm')\n",
        "genres.append('rock')\n",
        "genres.append('rap')\n",
        "genres.append('indie')\n",
        "genres.append('jazz')\n",
        "genres\n",
        "\n",
        "#List method used to add an element to the end of a list."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rfB5fVBpochm",
        "outputId": "40bdf82f-d396-401c-b2d0-d9b22f447510"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['edm', 'rock', 'rap', 'indie', 'jazz']"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#insert method : puts variable in front of list\n",
        "genres.insert(0, 'classical')\n",
        "genres "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6YiB6gcrpLp5",
        "outputId": "2249cf57-6365-42f1-e93e-92cd5fb17efe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['classical', 'edm', 'rock', 'rap', 'indie', 'jazz']"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#remove variable if you know the location\n",
        "del genres[0]\n",
        "genres\n",
        "#If you know the position of the item you want to remove from a list, you can use the del statement."
      ],
      "metadata": {
        "id": "FQlkFQ6EpZDb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "genres = ['pop', 'rock', 'rap', 'indie','jazz']\n",
        "genres.pop()\n",
        "genres\n",
        "#pop() removes \"jazz\" from end of the list, (last variable) \n",
        "#Method used to remove item from any position in a list and then use that value after it has been removed."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Lo82z9N0pkTz",
        "outputId": "09fe2e12-32f8-42ac-8c47-18d9f9edd888"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['pop', 'rock', 'rap', 'indie']"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "genres = ['edm', 'rock', 'rap', 'indie', 'jazz']\n",
        "least_favorite = genres.pop() \n",
        "#if you insert value inside parenthesis, it will remove the ordered variable in the list\n",
        "print(f'I don\\'t like', least_favorite)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H2-gi_4-qBfI",
        "outputId": "40ffa480-b68f-40d1-9b93-f7a3356e79cf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "I don't like jazz\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#remove variable\n",
        "genres = ['edm', 'rock', 'rap', 'indie', 'jazz']\n",
        "genres.remove('jazz')\n",
        "genres"
      ],
      "metadata": {
        "id": "Hfq357ierFM3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#try it yourself, invite someone to dinner (3 people), then change the list \n",
        "name = ['joe', 'bob', 'frank','emily']\n",
        "print(name)\n",
        "\n",
        "#set value to a specific variable in the list\n",
        "message = ', please bring me some food'\n",
        "print(f'{name[2]} {message}')\n",
        "\n",
        "#set value to a specific variable + f string\n",
        "cars=['honda', 'toyota', 'ford', 'dodge']\n",
        "print(f'I would like to own a {cars[3]} automobile')\n",
        "guests = ['Buddha', 'Socrates', 'Mohammed', 'Jesus', 'Abraham']\n",
        "print(f'dear {guests[0]} please come to dinner')\n",
        "print(f'dear {guests[1]} please come to dinner')\n",
        "print(f'dear {guests[2]} please come to dinner')\n",
        "print(f'dear {guests[3]} please come to dinner')\n",
        "print(f'dear {guests[4]} please come to dinner')\n",
        "decline = guests.pop(3)\n",
        "print(f'sadly, {decline} can\\'t make it.')\n",
        "\n",
        "guests.insert(0,'juan')\n",
        "guests.insert(2, 'sandra')\n",
        "guests.append('jupiter')\n",
        "print(f'dear {guests[0]} please come to dinner')\n",
        "print(f'dear {guests[1]} please come to dinner')\n",
        "print(f'dear {guests[2]} please come to dinner')\n",
        "print(f'dear {guests[3]} please come to dinner')\n",
        "print(f'dear {guests[4]} please come to dinner')\n",
        "\n",
        "len(guests)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VZOR-Dc3qny6",
        "outputId": "8e0324c8-921b-4486-e3b1-63aac5eb351b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['joe', 'bob', 'frank', 'emily']\n",
            "frank , please bring me some food\n",
            "I would like to own a dodge automobile\n",
            "dear Buddha please come to dinner\n",
            "dear Socrates please come to dinner\n",
            "dear Mohammed please come to dinner\n",
            "dear Jesus please come to dinner\n",
            "dear Abraham please come to dinner\n",
            "sadly, Jesus can't make it.\n",
            "dear juan please come to dinner\n",
            "dear Buddha please come to dinner\n",
            "dear sandra please come to dinner\n",
            "dear Socrates please come to dinner\n",
            "dear Mohammed please come to dinner\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "7"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "guests = ['Buddha', 'Socrates', 'Mohammed', 'Jesus', 'Abraham']\n",
        "print(f'dear {guests[0]} please come to dinner')\n",
        "print(f'dear {guests[1]} please come to dinner')\n",
        "print(f'dear {guests[2]} please come to dinner')\n",
        "print(f'dear {guests[3]} please come to dinner')\n",
        "print(f'dear {guests[4]} please come to dinner')\n",
        "print(\"i can only invite two people\")\n",
        "person = guests.pop()\n",
        "print(f\"sorry, {person} I don't have room.\")\n",
        "person = guests.pop()\n",
        "print(f\"sorry, {person} I don't have room.\")\n",
        "person = guests.pop()\n",
        "print(f\"sorry, {person} I don't have room.\")\n",
        "\n",
        "print(f'dear {guests[0]} please come to dinner')\n",
        "print(f'dear {guests[1]} please come to dinner')\n",
        "\n",
        "del guests[1]\n",
        "del guests[0]\n",
        "guests"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WILYol1C2y_k",
        "outputId": "3006dbb6-70ff-446a-8af6-79748b29a8ef"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dear Buddha please come to dinner\n",
            "dear Socrates please come to dinner\n",
            "dear Mohammed please come to dinner\n",
            "dear Jesus please come to dinner\n",
            "dear Abraham please come to dinner\n",
            "i can only invite two people\n",
            "sorry, Abraham I don't have room.\n",
            "sorry, Jesus I don't have room.\n",
            "sorry, Mohammed I don't have room.\n",
            "dear Buddha please come to dinner\n",
            "dear Socrates please come to dinner\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[]"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#try it yourself 3.8\n",
        "places = ['australia', 'turkey','laos', 'thailand','hawaii']\n",
        "# print(f\"I would like to visit {places[0]}\")\n",
        "# print(places)\n",
        "# print(sorted(places))\n",
        "# print(places)\n",
        "# places.reverse()\n",
        "# print(places)\n",
        "# places.reverse()\n",
        "# print(places)\n",
        "# places.sort()\n",
        "# print(places)\n",
        "# places.sort(reverse=True)\n",
        "# print(places)\n",
        "\n",
        "places = sorted(places)\n",
        "places.reverse()\n",
        "print(places)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-TH6kYRC4qhm",
        "outputId": "6d937373-6832-41d0-a6b9-b46636d77591"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['turkey', 'thailand', 'laos', 'hawaii', 'australia']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "''' word bank \n",
        "The ________ function lets you display your list in a particular order, but doesn’t affect the actual order of the list.  sorted()\n",
        "A ____ is a collection of items in a particular order.                                                                    list\n",
        "The ______ method changes the order of the list permanently.                                                              .sorted()\n",
        "You can access any element in a list by telling Python the position, or _____, of the item desired.                       index\n",
        "You can quickly find the length of a list by using the _____ function.                                                    len()\n",
        "List method used to add an element to the end of a list.                                                                  .append()\n",
        "List method used to insert an element at any position in a list.                                                          .insert()\n",
        "If you know the position of the item you want to remove from a list, you can use the ___ statement.                         del \n",
        "If you only know the value of the item you want to remove, you can use the ________ method.                               .remove()\n",
        "Method used to remove item from any position in a list and then use that value after it has been removed.                   .pop()\n",
        "''' \n",
        "\n"
      ],
      "metadata": {
        "id": "eK1PHraxyaK9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#organizing the list with sort()\n",
        "genres = ['edm', 'rock', 'rap', 'indie', 'jazz']\n",
        "genres.sort()\n",
        "genres"
      ],
      "metadata": {
        "id": "6PZqHl95rZPf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "genres = ['edm', 'rock', 'rap', 'indie', 'jazz']\n",
        "print(sorted(genres))\n",
        "print(genres)\n",
        "#printing without sorted"
      ],
      "metadata": {
        "id": "fwRLXRTprwrk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#permanently print with sorted order, reverse(), this is a method !!!!!\n",
        "genres = ['edm', 'rock', 'rap', 'indie', 'jazz']\n",
        "genres.reverse()\n",
        "genres"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uJ0oNzYcr8qe",
        "outputId": "0a17116f-3351-4b66-8374-4cf9a130b974"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['jazz', 'indie', 'rap', 'rock', 'edm']"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#length (how many variables are in the list)\n",
        "len(genres)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "00CYI8bKsI2L",
        "outputId": "73cd6557-c6da-4f0c-dfeb-57046f912014"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Try it yourself, exercise. college board project requires list, variables in list, loop, list manipulations, etc, (written portion need to select used method)\n",
        "#length               len()\n",
        "#remove               remove()\n",
        "#remove from location pop()\n",
        "#reverse              reverse()\n",
        "#replace              index()\n",
        "#\n"
      ],
      "metadata": {
        "id": "aRp-34q-sPki"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}