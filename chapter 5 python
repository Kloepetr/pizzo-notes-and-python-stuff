{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Kloepetr/pizzo-notes-and-python-stuff/blob/main/chapter%205%20python%20(revision)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "G3sSLSNvgrGJ"
      },
      "source": [
        "## Python Crash Course Chapter 5 `if` statements"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OOG80GhJgrGR"
      },
      "source": [
        "1. A Simple Example\n",
        "2. Conditional Tests\n",
        "   1. Checking for Equality\n",
        "   2. Ignoring Case When Checking for Equality\n",
        "   3. Checking for Inequality\n",
        "   4. Numerical Comparisons\n",
        "   5. Checking Multiple Conditions\n",
        "      1. Using `and` to Check Multiple Conditions\n",
        "      2. Using `or` to Check Multiple Conditions\n",
        "   6. Checking Whether a Value Is in a List\n",
        "   7. Checking Wheter a Value Is Not in a List\n",
        "   8. Boolean Expressions"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YSRylP-IgrGT",
        "outputId": "c385daf7-23d2-4c76-98f7-e747915c4b1e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Audi\n",
            "BMW\n",
            "Subaru\n",
            "Toyota\n"
          ]
        }
      ],
      "source": [
        "# 1.1 A Simple Example\n",
        "\n",
        "cars = ['audi', 'bmw', 'subaru', 'toyota']\n",
        "for car in cars:\n",
        "    if car == 'bmw':\n",
        "        print(car.upper())\n",
        "    else:\n",
        "        print(car.title())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yztcHWnlgrGY",
        "outputId": "7833a3c1-d147-4b1f-8e3d-dd8c47c5fc14"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "execution_count": 2,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# 2.1 Checking for Equality\n",
        "\n",
        "car = 'bmw'\n",
        "car == 'bmw'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KMjRPCOggrGa",
        "outputId": "e437513e-9e71-42cd-ba8b-ff5e301684e1"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# 3.1 Ignoring Case When Checking for Equality\n",
        "\n",
        "car = 'audi'\n",
        "car == 'bmw'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4yfQecv9grGb",
        "outputId": "514e21ce-0677-471a-d502-87b0b73c9405"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# 3.2 Ignoring Case When Checking for Equality\n",
        "\n",
        "car = 'Audi'\n",
        "car == 'audi'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iDiNJvRigrGc",
        "outputId": "0b2a1d0a-fdbf-4c58-f297-1e51823c5610"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "execution_count": 8,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# 3.3 Ignoring Case When Checking for Equality\n",
        "\n",
        "car = 'Audi'\n",
        "car.lower() == 'audi'\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3J2llZJZgrGd",
        "outputId": "dc38b073-73fd-4dbc-9ca8-051d737b83ef"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "'Audi'"
            ]
          },
          "execution_count": 9,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# 3.4 Ignoring Case When Checking for Equality\n",
        "\n",
        "car\n",
        "'Audi'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "c5pu5yaPgrGe",
        "outputId": "0c165528-fc09-42f0-ff40-e7b8ae7d51a6"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Hold the anchovies!\n"
          ]
        }
      ],
      "source": [
        "# 4.1 Checking for Inequality\n",
        "\n",
        "requested_topping = 'mushrooms'\n",
        "if requested_topping != 'anchovies':\n",
        "    print(\"Hold the anchovies!\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "reyC4rr9grGf",
        "outputId": "5d6f4cfd-e6f4-44fe-d0f8-7d5230719e63"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "execution_count": 12,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# 5.1 Numerical Comparisons\n",
        "\n",
        "age = 18\n",
        "age == 18"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "uLmeUu-fgrGg",
        "outputId": "a8b8a85b-4279-41c9-8475-f17480286f07"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "That is not the correct answer. Please try again!\n"
          ]
        }
      ],
      "source": [
        "# 5.2 Numerical Comparisons\n",
        "\n",
        "answer = 17\n",
        "if answer != 42:\n",
        "    print(\"That is not the correct answer. Please try again!\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rw--cbxygrGh",
        "outputId": "7874b7a4-d8f2-4511-ba36-428fdf70648f"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "execution_count": 15,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# 5.3 Numerical Comparisons\n",
        "\n",
        "age = 19\n",
        "age < 21\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eVa13BupgrGi",
        "outputId": "85ebede5-3f84-4e47-ccab-e8ae28d4a1f8"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "execution_count": 16,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# 5.4 Numerical Comparisons\n",
        "\n",
        "age = 19\n",
        "age <= 21\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vuP7u0ZkgrGj",
        "outputId": "29841b32-e979-44bb-e3f1-a287cd3c2939"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "execution_count": 19,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# 5.5 Numerical Comparisons\n",
        "\n",
        "age = 19\n",
        "age >= 21\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wLgBbNyCgrGk",
        "outputId": "dd9c173b-8831-4120-d078-f07022eebd7c"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "execution_count": 18,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# 5.6 Numerical Comparisons\n",
        "\n",
        "age = 19\n",
        "age >= 21\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zuEV4c1YgrGl",
        "outputId": "24d244c3-be71-4fed-fe2f-03efd6e49092"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "execution_count": 17,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# 6.1 Using `and` to Check Multiple Conditions\n",
        "\n",
        "age_0 = 22\n",
        "age_1 = 18\n",
        "age_0 >= 21 and age_1 >= 21\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UGRZKMkbgrGl",
        "outputId": "3676f21f-8fa8-4a61-cfd1-7469fe1d15cc"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "execution_count": 20,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# 6.2 Using `and` to Check Multiple Conditions\n",
        "\n",
        "age_1 = 22\n",
        "age_0 >= 21 and age_1 >= 21"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_serBmzsgrGm",
        "outputId": "d60d0bd4-dfd7-4f09-d729-bb4f05f93f63"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "execution_count": 21,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# 7.1 Using `or` to Check Multiple Conditions\n",
        "\n",
        "age_0 = 22\n",
        "age_1 = 18\n",
        "age_0 >= 21 or age_1 >= 21\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "g1o8h0ZkgrGn",
        "outputId": "bea39b81-cdf4-4354-bf79-b945f6e31be7"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "execution_count": 22,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# 7.2 Using `or` to Check Multiple Conditions\n",
        "\n",
        "age_0 = 18\n",
        "age_0 >= 21 or age_1 >= 21\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fUNlWQZlgrGn",
        "outputId": "a9a3b721-8575-4d4b-81f9-51af684799e5"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "execution_count": 23,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# 8.1 Checking Whether a Value Is in a List\n",
        "\n",
        "requested_toppings = ['mushrooms', 'onions', 'pineapple']\n",
        "'mushrooms' in requested_toppings\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yCoaQPfRgrGo",
        "outputId": "6c92032a-759e-4a55-d240-95539bde3152"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "execution_count": 24,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# 8.2 Checking Whether a Value Is in a List\n",
        "\n",
        "'pepperoni' in requested_toppings"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nMwhO0bDgrGp",
        "outputId": "b878caa9-ef2a-4622-9704-167aef6401a0"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Marie, you can post a response if you wish.\n"
          ]
        }
      ],
      "source": [
        "# 7. Checking Wheter a Value Is Not in a List\n",
        "\n",
        "banned_users = ['andrew', 'carolina', 'david']\n",
        "user = 'marie'\n",
        "if user not in banned_users:\n",
        "    print(f\"{user.title()}, you can post a response if you wish.\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fkDI_k-5grGq"
      },
      "outputs": [],
      "source": [
        "# 8. Boolean Expressions\n",
        "\n",
        "game_active = True\n",
        "can_edit = False"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8ptD9KK0grGr"
      },
      "source": [
        "### TRY IT YOURSELF\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qhcvyekSgrGt"
      },
      "source": [
        "**5-1. Conditional Tests:**   \n",
        "Write a series of conditional tests.   \n",
        "Print a statement describing each test and your prediction for the results of each test.   \n",
        "Your code should look something like this:\n",
        "```python\n",
        "car = 'subaru'\n",
        "print(\"Is car == 'subaru'? I predict True.\")\n",
        "print(car == 'subaru')\n",
        "print(\"\\nIs car == 'audi'? I predict False.\")\n",
        "print(car == 'audi')\n",
        "```\n",
        "- Look closely at your results, and make sure you understand why each line evaluates to `True` or `False`.\n",
        "- Create at least 10 tests.   \n",
        "  - Have at least 5 tests evaluate to `True` and \n",
        "  - another 5 tests evaluate to `False`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tUVWJv92grGu",
        "outputId": "db5e4108-bf38-4813-e218-883236bb2719"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Does 1 + 1 == 0 ? I predict False\n",
            "False\n",
            "\n",
            "Does 1 + 1 == 1 ? I predict False\n",
            "False\n",
            "\n",
            "Does 1 + 1 == 3 ? I predict False\n",
            "False\n",
            "\n",
            "Does 1 + 1 == 4 ? I predict False\n",
            "False\n",
            "\n",
            "Does 1 + 1 == 1 ? I predict False\n",
            "False\n",
            "\n",
            "Does 1 + 1 == 2 ? I predict True\n",
            "True\n",
            "\n",
            "Does 1 + 1 == 4/2 ? I predict True\n",
            "True\n",
            "\n",
            "Does 1 + 1 == 2*1^0 ? I predict True\n",
            "True\n",
            "\n",
            "Does 1 + 1 == 2*ln(e)? I predict True\n",
            "True\n",
            "\n",
            "Does 1 + 1 == 4*(1/2)? I predict True\n",
            "True\n",
            "\n",
            "Does 1 + 1 == 1/(1/2)? I predict True\n",
            "True\n"
          ]
        }
      ],
      "source": [
        "# code\n",
        "import math\n",
        "\n",
        "answer = 2\n",
        "print(\"Does 1 + 1 == 0 ? I predict False\")\n",
        "print(answer == 0 )\n",
        "print(\"\\nDoes 1 + 1 == 1 ? I predict False\")\n",
        "print(answer == 1 )\n",
        "print(\"\\nDoes 1 + 1 == 3 ? I predict False\")\n",
        "print(answer == 3 )\n",
        "print(\"\\nDoes 1 + 1 == 4 ? I predict False\")\n",
        "print(answer == 4 )\n",
        "print(\"\\nDoes 1 + 1 == 1 ? I predict False\")\n",
        "print(answer == 5 )\n",
        "print(\"\\nDoes 1 + 1 == 2 ? I predict True\")\n",
        "print(answer == 2 )\n",
        "print(\"\\nDoes 1 + 1 == 4/2 ? I predict True\")\n",
        "print(answer == 4/2 )\n",
        "print(\"\\nDoes 1 + 1 == 2*1^0 ? I predict True\")\n",
        "print(answer == 2*1^0 )\n",
        "print(\"\\nDoes 1 + 1 == 2*ln(e)? I predict True\")\n",
        "print(answer == 2*math.log(math.e) )\n",
        "print(\"\\nDoes 1 + 1 == 4*(1/2)? I predict True\")\n",
        "print(answer == 4*(1/2) )\n",
        "print(\"\\nDoes 1 + 1 == 1/(1/2)? I predict True\")\n",
        "print(answer == 1/(1/2) )\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Cfyw2_T7grGv"
      },
      "source": [
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5Cxbb-GPgrGv"
      },
      "source": [
        "**5-2. More Conditional Tests:**   \n",
        "You don’t have to limit the number of tests you create to 10.   \n",
        "If you want to try more comparisons, write more tests.   \n",
        "Have at least one `True` and one `False` result for each of the following:\n",
        "- Tests for equality and inequality with strings\n",
        "- Tests using the `lower()` method\n",
        "- Numerical tests involving \n",
        "  - equality and inequality, \n",
        "  - greater than and less than, \n",
        "  - greater than or equal to, \n",
        "  - and less than or equal to\n",
        "- Tests using the `and` keyword and the `or` keyword\n",
        "- Test whether an item is in a list\n",
        "- Test whether an item is not in a list"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_PVn2mClgrGx"
      },
      "outputs": [],
      "source": [
        "# code"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iSsuaziugrGx"
      },
      "source": [
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QZlIOnyIgrGy"
      },
      "source": [
        "### `if` Statements\n",
        "1. Simple `if` Statements\n",
        "2. `if`-`else` Statements\n",
        "3. The `if`-`elif`-`else` Chain\n",
        "4. Using Multiple `elif` Blocks\n",
        "5. Omitting the `else` Block\n",
        "6. Testing Multiple Conditions"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1n7yJZ_kgrGy",
        "outputId": "2d80392a-5ef2-4c86-9699-ed88bd77f51b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "You are old enough to vote!\n"
          ]
        }
      ],
      "source": [
        "# 1.1 Simple if Statements\n",
        "\n",
        "age = 19\n",
        "if age >= 18:\n",
        "    print(\"You are old enough to vote!\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pXUY996ugrGz",
        "outputId": "fb56543a-e409-4aa0-e6aa-6b57676397d2"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "You are old enough to vote!\n",
            "Have you registered to vote yet?\n"
          ]
        }
      ],
      "source": [
        "# 1.2 Simple if Statements\n",
        "\n",
        "age = 19\n",
        "if age >= 18:\n",
        "    print(\"You are old enough to vote!\")\n",
        "    print(\"Have you registered to vote yet?\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "OLBObZ3WgrG0",
        "outputId": "c70845ae-8892-451f-cc1a-0a36c2fa5a1b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Sorry, you are too young to vote.\n",
            "Please register to vote as soon as you turn 18!\n"
          ]
        }
      ],
      "source": [
        "# 2.1 if-else Statements\n",
        "\n",
        "age = 17\n",
        "if age >= 18:\n",
        "    print(\"You are old enough to vote!\")\n",
        "    print(\"Have you registered to vote yet?\")\n",
        "else:\n",
        "    print(\"Sorry, you are too young to vote.\")\n",
        "    print(\"Please register to vote as soon as you turn 18!\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nO34KSKogrG1",
        "outputId": "9dfd3b2a-0409-4300-8c9b-fff94b3822dc"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Your admission cost is $25.\n"
          ]
        }
      ],
      "source": [
        "# 3.1 The if-elif-else Chain\n",
        "\n",
        "age = 12\n",
        "if age < 4:\n",
        "    print(\"Your admission cost is $0.\")\n",
        "elif age < 18:\n",
        "    print(\"Your admission cost is $25.\")\n",
        "else:\n",
        "    print(\"Your admission cost is $40.\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "z4Epyi7igrG2",
        "outputId": "e12f204b-b337-4b37-8818-087148aaa089"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Your admission cost is $25.\n"
          ]
        }
      ],
      "source": [
        "# 4.1 Using Multiple elif Blocks\n",
        "\n",
        "age = 12\n",
        "if age < 4:\n",
        "    price = 0\n",
        "elif age < 18:\n",
        "    price = 25\n",
        "elif age < 65:\n",
        "    price = 40\n",
        "else:\n",
        "    price = 20\n",
        "print(f\"Your admission cost is ${price}.\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lADuuszsgrG3",
        "outputId": "66cfb0e8-c6c9-4a61-e5e0-96b000f29a74"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Your admission cost is $25.\n"
          ]
        }
      ],
      "source": [
        "# 5.1 Omitting the else Block\n",
        "\n",
        "age = 12\n",
        "if age < 4:\n",
        "    price = 0\n",
        "elif age < 18:\n",
        "    price = 25\n",
        "elif age < 65:\n",
        "    price = 40\n",
        "elif age >= 65:\n",
        "    price = 20\n",
        "print(f\"Your admission cost is ${price}.\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IBPsrC7TgrG4",
        "outputId": "ee6676da-87f6-40ca-fc03-4f8f38aaff3b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Adding mushrooms.\n",
            "Adding extra cheese.\n",
            "\n",
            "Finished making your pizza!\n"
          ]
        }
      ],
      "source": [
        "# 6.1 Testing Multiple Conditions\n",
        "\n",
        "requested_toppings = ['mushrooms', 'extra cheese']\n",
        "if 'mushrooms' in requested_toppings:\n",
        "    print(\"Adding mushrooms.\")\n",
        "if 'pepperoni' in requested_toppings:\n",
        "    print(\"Adding pepperoni.\")\n",
        "if 'extra cheese' in requested_toppings:\n",
        "    print(\"Adding extra cheese.\")\n",
        "    \n",
        "print(\"\\nFinished making your pizza!\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N6n8IFWogrG5"
      },
      "source": [
        "### TRY IT YOURSELF\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rCLVtlNpgrG5"
      },
      "source": [
        "**5-3. Alien Colors #1:**   \n",
        "Imagine an alien was just shot down in a game. Create a variable called alien_color and assign it a value of 'green', 'yellow', or 'red'.\n",
        "- Write an  `if` statement to test whether the alien’s color is green. If it is, print a message that the player just earned 5 points.\n",
        "- Write one version of this program that passes the  `if` test and another that fails. (The version that fails will have no output.)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "uQxNpiiggrG6"
      },
      "outputs": [],
      "source": [
        "# code\n",
        "\n",
        "alien_color = 'yellow'\n",
        "\n",
        "if alien_color == 'green':\n",
        "    print(\"you just earned 5 points !!!\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RoUpKA1vgrG6",
        "outputId": "7bf59ad5-8179-40ac-dc51-82f7d6064d1e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "you just earned 5 points !!!\n"
          ]
        }
      ],
      "source": [
        "alien_color = 'green'\n",
        "\n",
        "if alien_color == 'green':\n",
        "    print(\"you just earned 5 points !!!\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0HZ1GuuAgrG7"
      },
      "source": [
        "**5-4. Alien Colors #2:**   \n",
        "Choose a color for an alien as you did in Exercise 5-3, and write an  `if`-`else` chain.\n",
        "- If the alien’s color is green, print a statement that the player just earned 5 points for shooting the alien.\n",
        "- If the alien’s color isn’t green, print a statement that the player just earned 10 points.\n",
        "- Write one version of this program that runs the  `if` block and another that runs the `else` block."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4acO6Vl-grG8",
        "outputId": "05771f8f-8f4f-4170-a16e-52e70a7edb23"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "you just earned 5 points !!!\n"
          ]
        }
      ],
      "source": [
        "# code\n",
        "\n",
        "alien_color = 'green'\n",
        "if alien_color == 'green':\n",
        "    print(\"you just earned 5 points !!!\")\n",
        "else:\n",
        "    print(\"you just earned 10 points !!!\")\n",
        "    "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2LjhvSPwgrG8",
        "outputId": "e9d1d309-fe3e-4013-faf4-f089cfe7d845"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "you just earned 10 points !!!\n"
          ]
        }
      ],
      "source": [
        "alien_color = 'yellow'\n",
        "if alien_color == 'green':\n",
        "    print(\"you just earned 5 points !!!\")\n",
        "else:\n",
        "    print(\"you just earned 10 points !!!\")\n",
        "    "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3ISECm4xgrG9"
      },
      "source": [
        "**5-5. Alien Colors #3:**   \n",
        "Turn your  `if`-`else` chain from Exercise 5-4 into an  `if`-`elif`-`else` chain.\n",
        "- If the alien is green, print a message that the player earned 5 points.\n",
        "- If the alien is yellow, print a message that the player earned 10 points.\n",
        "- If the alien is red, print a message that the player earned 15 points.\n",
        "- Write three versions of this program, making sure each message is printed for the appropriate color alien."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "NIKDZyhNgrG_",
        "outputId": "a9c1c2c5-2602-4f53-d6a4-cfa6e1a8c0e7"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "you just earned 10 points !!!\n"
          ]
        }
      ],
      "source": [
        "# code\n",
        "\n",
        "alien_color = 'green'\n",
        "if alien_color == 'green':\n",
        "    print(\"you just earned 5 points !!!\")\n",
        "elif alien_color == 'yellow':\n",
        "    print(\"you just earned 10 points !!!\")\n",
        "else:\n",
        "    print(\"you just earned 15 points !!!\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sC3i9i9bgrHA",
        "outputId": "675fcff3-6c07-4b3d-c7b1-b220d355a080"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "you just earned 10 points !!!\n"
          ]
        }
      ],
      "source": [
        "alien_color = 'yellow'\n",
        "if alien_color == 'green':\n",
        "    print(\"you just earned 5 points !!!\")\n",
        "elif alien_color == 'yellow':\n",
        "    print(\"you just earned 10 points !!!\")\n",
        "else:\n",
        "    print(\"you just earned 15 points !!!\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-35LW4afgrHB",
        "outputId": "2e7949b4-f37c-4469-fc68-0e16a5b6dadb"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "you just earned 15 points !!!\n"
          ]
        }
      ],
      "source": [
        "alien_color = 'red'\n",
        "if alien_color == 'green':\n",
        "    print(\"you just earned 5 points !!!\")\n",
        "elif alien_color == 'yellow':\n",
        "    print(\"you just earned 10 points !!!\")\n",
        "else:\n",
        "    print(\"you just earned 15 points !!!\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_QrcD0FhgrHC"
      },
      "source": [
        "**5-6. Stages of Life:**   \n",
        "Write an  `if`-`elif`-`else` chain that determines a person’s stage of life. Set a value for the variable age, and then:\n",
        "- If the person is less than 2 years old, print a message that the person is a baby.\n",
        "- If the person is at least 2 years old but less than 4, print a message that the person is a toddler.\n",
        "- If the person is at least 4 years old but less than 13, print a message that the person is a kid.\n",
        "- If the person is at least 13 years old but less than 20, print a message that the person is a teenager.\n",
        "- If the person is at least 20 years old but less than 65, print a message that the person is an adult.\n",
        "- If the person is age 65 or older, print a message that the person is an elder"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "o10U8EIugrHD",
        "outputId": "fbd00f5f-9f2b-4632-902a-2047ef91b2b7"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "you are a teenager\n"
          ]
        }
      ],
      "source": [
        "# code\n",
        "\n",
        "age = 17\n",
        "if age >= 2 and age < 4:\n",
        "    print(\"you are a toddler\")\n",
        "elif age >= 4 and age < 13:\n",
        "    print(\"you are a kid\")\n",
        "elif age >= 13 and age < 20:\n",
        "    print(\"you are a teenager\")   \n",
        "elif age >= 20 and age < 65:\n",
        "    print(\"you are an adult\")\n",
        "elif age >= 65:\n",
        "    print(\"you are an elder\")\n",
        "else:\n",
        "    print(\"you are a baby\")\n",
        "    "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DaPfev-ugrHE"
      },
      "source": [
        "**5-7. Favorite Fruit:**   \n",
        "Make a list of your favorite fruits, and then write a series of independent  `if` statements that check for certain fruits in your list.\n",
        "- Make a list of your three favorite fruits and call it favorite_fruits.\n",
        "- Write five  `if` statements. Each should check whether a certain kind of fruit is in your list. If the fruit is in your list, the  `if` block should print a statement, such as You really like bananas!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "T6TGbUnMgrHF",
        "outputId": "fffb4f77-4f42-4a6d-95bc-41e039f45b35"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "You really like bananas\n",
            "You really like apples\n",
            "You really like oranges\n"
          ]
        }
      ],
      "source": [
        "# code\n",
        "\n",
        "favorite_fruits = [\"apple\", \"banana\", \"orange\"]\n",
        "\n",
        "if \"peach\" in favorite_fruits:\n",
        "    print(\"You really like peaches\")\n",
        "if \"banana\" in favorite_fruits:\n",
        "    print(\"You really like bananas\")\n",
        "if \"apple\" in favorite_fruits:\n",
        "    print(\"You really like apples\")\n",
        "if \"orange\" in favorite_fruits:\n",
        "    print(\"You really like oranges\")\n",
        "if \"strawberry\" in favorite_fruits:\n",
        "    print(\"You really like strawberries\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g0Y9J3jwgrHG"
      },
      "source": [
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WJ07492bgrHG"
      },
      "source": [
        "### Using `if` Statements with Lists\n",
        "1. Checking for Special Items\n",
        "2. Checking That a List Is Not Empty\n",
        "3. Using Multiple Lists"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CjyrYO6LgrHH",
        "outputId": "6f0812af-fda9-4d0b-c06f-255e85cbe624"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Adding mushrooms.\n",
            "Adding green peppers.\n",
            "Adding extra cheese.\n",
            "\n",
            "Finished making your pizza!\n"
          ]
        }
      ],
      "source": [
        "# 1.1 Checking for Special Items\n",
        "\n",
        "requested_toppings = ['mushrooms', 'green peppers', 'extra cheese']\n",
        "for requested_topping in requested_toppings:\n",
        "    print(f\"Adding {requested_topping}.\")\n",
        "print(\"\\nFinished making your pizza!\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9aFNSIq7grHI",
        "outputId": "20818635-ba42-4047-e8e3-31f3e51add38"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Adding mushrooms.\n",
            "Sorry, we are out of green peppers right now.\n",
            "Adding extra cheese.\n",
            "\n",
            "Finished making your pizza!\n"
          ]
        }
      ],
      "source": [
        "# 1.2 Checking for Special Items\n",
        "\n",
        "requested_toppings = ['mushrooms', 'green peppers', 'extra cheese']\n",
        "for requested_topping in requested_toppings:\n",
        "    if requested_topping == 'green peppers':\n",
        "        print(\"Sorry, we are out of green peppers right now.\")\n",
        "    else:\n",
        "        print(f\"Adding {requested_topping}.\")\n",
        "print(\"\\nFinished making your pizza!\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HI8YOIzZgrHJ",
        "outputId": "9f2f1297-0ddd-4385-faff-e6ac56db222c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Are you sure you want a plain pizza?\n"
          ]
        }
      ],
      "source": [
        "# 2.1 Checking That a List Is Not Empty\n",
        "\n",
        "requested_toppings = []\n",
        "if requested_toppings:\n",
        "    for requested_topping in requested_toppings:\n",
        "        print(f\"Adding {requested_topping}.\")\n",
        "    print(\"\\nFinished making your pizza!\")\n",
        "else:\n",
        "    print(\"Are you sure you want a plain pizza?\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "TuXbCMrdgrHJ",
        "outputId": "7936fe94-f30f-4415-cf74-947a87bbf62d"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Adding mushrooms.\n",
            "Sorry, we don't have french fries.\n",
            "\n",
            "Finished making your pizza!\n",
            "Adding extra cheese.\n"
          ]
        }
      ],
      "source": [
        "# Using Multiple Lists\n",
        "\n",
        "available_toppings = ['mushrooms', 'olives', 'green peppers',\n",
        "                      'pepperoni', 'pineapple', 'extra cheese']\n",
        "requested_toppings = ['mushrooms', 'french fries', 'extra cheese']\n",
        "for requested_topping in requested_toppings:\n",
        "    if requested_topping in available_toppings:\n",
        "        print(f\"Adding {requested_topping}.\")\n",
        "    else:\n",
        "        print(f\"Sorry, we don't have {requested_topping}.\")\n",
        "        print(\"\\nFinished making your pizza!\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BY3O8hDcgrHK"
      },
      "source": [
        "### TRY IT YOURSELF\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Vdwaq5KUgrHL"
      },
      "source": [
        "**5-8. Hello Admin:**   \n",
        "Make a list of five or more usernames, including the name `'admin'`.   \n",
        "Imagine you are writing code that will print a greeting to each user after they log in to a website.  \n",
        "Loop through the list, and print a greeting to each user.\n",
        "- If the username is `'admin'`, print a special greeting, such as *Hello admin, would you like to see a status report?*\n",
        "- Otherwise, print a generic greeting, such as *Hello Jaden, thank you for logging in again.*"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WWOB9qCTgrHM",
        "outputId": "04327626-af34-4df1-d3a2-95e32b480eec"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Hello catl0ver69, thank you for logging in again.\n",
            "Hello sl1ckn1ck666, thank you for logging in again.\n",
            "Hello EZwin420, thank you for logging in again.\n",
            "Hello user067801238, thank you for logging in again.\n",
            "Hello admin, would you like to see a status report?\n"
          ]
        }
      ],
      "source": [
        "username = ['catl0ver69', 'sl1ckn1ck666', 'EZwin420', 'user067801238', 'admin']\n",
        "\n",
        "for username in username:\n",
        "    if \"admin\" in username:\n",
        "        print(\"Hello admin, would you like to see a status report?\")\n",
        "    else:\n",
        "        print(f\"Hello {username}, thank you for logging in again.\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KuPczu-ygrHM"
      },
      "source": [
        "**5-9. No Users:**   \n",
        "Add an `if` test to make sure the list of users is not empty.\n",
        "- If the list is empty, print the message *We need to find some users!*\n",
        "- Remove all of the usernames from your list, and make sure the correct message is printed."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rj7T5V-SgrHN",
        "outputId": "eadcedbb-06df-49fb-9516-da271f0e1781"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "We need to find some users\n"
          ]
        }
      ],
      "source": [
        "username = []\n",
        "if username:\n",
        "    username = []\n",
        "else:\n",
        "    print(\"We need to find some users\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vs6hbqXBgrHO"
      },
      "source": [
        "**5-10. Checking Usernames:**   \n",
        "Do the following to create a program that simulates how websites ensure that everyone has a unique username.\n",
        "- Make a list of five or more usernames called `current_users`.\n",
        "- Make another list of five usernames called `new_users`. Make sure one or two of the new usernames are also in the `current_users` list.\n",
        "- Loop through the `new_users` list to see if each new username has already been used. If it has, print a message that the person will need to enter a new username. If a username has not been used, print a message saying that the username is available.\n",
        "- Make sure your comparison is case insensitive. If `'John'` has been used, `'JOHN'` should not be accepted. \n",
        "  - (To do this, you’ll need to make a copy of `current_users` containing the lowercase versions of all existing users.)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CNV72BrJgrHQ",
        "outputId": "36e367d7-b489-4d3a-b7b8-bb0662d1ad8a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "sl1ckn1ck666, you will need to enter a new username\n",
            "EZwin420, you will need to enter a new username\n",
            "the username user90129018 is available\n",
            "the username user12039248 is available\n",
            "the username h3ll0worlx05 is available\n"
          ]
        }
      ],
      "source": [
        "current_users = ['catl0ver69', 'sl1ckn1ck666', 'EZwin420', 'user067801238', 'admin']\n",
        "new_users = ['sl1ckn1ck666', 'EZwin420', 'user90129018', 'user12039248', 'h3ll0worlx05']\n",
        "             \n",
        "for new_users in new_users:\n",
        "    if new_users in current_users or new_users.upper() in current_users:\n",
        "        print(f\"{new_users}, you will need to enter a new username\")   \n",
        "    else:\n",
        "        print(f\"the username {new_users} is available\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3-SNASZggrHR"
      },
      "source": [
        "**5-11. Ordinal Numbers:**   \n",
        "Ordinal numbers indicate their position in a list, such as *1st* or *2nd*.   \n",
        "Most ordinal numbers end in *th*, except 1, 2, and 3.\n",
        "- Store the numbers 1 through 9 in a list.\n",
        "- Loop through the list.\n",
        "- Use an `if`-`elif`-`else` chain inside the loop to print the proper ordinal ending for each number. Your output should read `\"1st 2nd 3rd 4th 5th 6th 7th 8th 9th\"`, and each result should be on a separate line."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Ju8bOpEbgrHS",
        "outputId": "32106c85-6d7f-4094-fd7d-fe20edda1d92"
      },
      "outputs": [
        {
          "ename": "AttributeError",
          "evalue": "'str' object has no attribute 'append'",
          "output_type": "error",
          "traceback": [
            "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[1;32mc:\\Users\\wangxia5\\Downloads\\homework.ipynb Cell 68\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[1;34m()\u001b[0m\n\u001b[0;32m     <a href='vscode-notebook-cell:/c%3A/Users/wangxia5/Downloads/homework.ipynb#W0sZmlsZQ%3D%3D?line=9'>10</a>\u001b[0m     \u001b[39melse\u001b[39;00m:\n\u001b[0;32m     <a href='vscode-notebook-cell:/c%3A/Users/wangxia5/Downloads/homework.ipynb#W0sZmlsZQ%3D%3D?line=10'>11</a>\u001b[0m         suffix \u001b[39m==\u001b[39m \u001b[39m\"\u001b[39m\u001b[39mth\u001b[39m\u001b[39m\"\u001b[39m\n\u001b[1;32m---> <a href='vscode-notebook-cell:/c%3A/Users/wangxia5/Downloads/homework.ipynb#W0sZmlsZQ%3D%3D?line=11'>12</a>\u001b[0m     numbers\u001b[39m.\u001b[39;49mappend(suffix)\n\u001b[0;32m     <a href='vscode-notebook-cell:/c%3A/Users/wangxia5/Downloads/homework.ipynb#W0sZmlsZQ%3D%3D?line=12'>13</a>\u001b[0m \u001b[39mprint\u001b[39m(numbers)\n",
            "\u001b[1;31mAttributeError\u001b[0m: 'str' object has no attribute 'append'"
          ]
        }
      ],
      "source": [
        "numbers = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n",
        "\n",
        "for numbers in numbers:\n",
        "    if numbers == \"1\":\n",
        "        suffix = \"st\"\n",
        "    elif numbers == \"2\":\n",
        "        suffix = \"nd\"\n",
        "    elif numbers == \"3\":\n",
        "        suffix == \"rd\"\n",
        "    else:\n",
        "        suffix == \"th\"\n",
        "    numbers.append(suffix)\n",
        "print(numbers)\n"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.6"
    },
    "orig_nbformat": 4,
    "vscode": {
      "interpreter": {
        "hash": "97dd549d2e08db5165edaab73e1703920f0576fe205e860290cfb4acd4edc03a"
      }
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
