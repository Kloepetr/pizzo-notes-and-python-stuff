{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPUbGUzA73toBU5iKZNVNEC",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Kloepetr/python-beginner-mini-projects/blob/main/chapter%202%20python\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Python Chapter 2 : variable and simple data types\n"
      ],
      "metadata": {
        "id": "1CNsy3Fua5zG"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mE_4Wej5ETrG",
        "outputId": "08ffc599-efd8-4de1-d986-8286ab9d6056"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello Python World!\n"
          ]
        }
      ],
      "source": [
        "print(\"Hello Python World!\")\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "message = \"Hello Python World!\"\n",
        "print(message)\n",
        "message = \"Hello Python Crash course reader\"\n",
        "print(message)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jFfQ_wBrEm-3",
        "outputId": "ed7cd3c2-29c9-458f-f902-2c343520b11c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello Python World!\n",
            "Hello Python Crash course reader\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "-prompt rackets (>>>)\n",
        "-how to use command menu, command prompt\n",
        "-naming and using variables\n",
        "'''\n"
      ],
      "metadata": {
        "id": "SwO1AeRMbOJc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Hello Python interpreter!\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SfPAq_codaj0",
        "outputId": "d2d8095b-6743-463a-84fc-b7952844d01e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello Python interpreter!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#strings\n",
        "\"This is a string\"\n",
        "'This is also a string'\n",
        "#changing case with string methods\n",
        "#run cell with control + enter\n",
        "'I told students, \"Read the chapter ahead of time\" '\n",
        "\"The language 'python' is named after Monty Python, not the snake\"\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "T5Zl9WvgdheU",
        "outputId": "881cf475-a253-417f-dc6f-77c64c9485da"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "\"The language 'python' is named after Monty Python, not the snake\""
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "name = \"Ada Lovelace\"\n",
        "print(name.title())\n",
        "# The title()method changes each word to title case, which each word begins with capital letter"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bLNChmLMe4K8",
        "outputId": "d613845e-b1cc-42b2-9989-a123e608c759"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ada Lovelace\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#adding variables in strings, F string {} (fancy bracket)\n",
        "first_name = \"ada\"\n",
        "last_name = \"lovelace\"\n",
        "full_name = f\"{first_name} {last_name}\"\n",
        "print(full_name)\n",
        "print(f\"hello, {full_name.title()}!\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VpZHV_epfdxb",
        "outputId": "1e4fefe1-cd03-4f2c-ae4d-fbe60a99609c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ada lovelace\n",
            "hello, Ada Lovelace!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#adding white space to stings : nonprinting characters\n",
        "print('Python')\n",
        "print('\\tPython')\n",
        "#\\n = new line\n",
        "print(\"Languages:\\nPython\\nC\\njavaScript\")\n",
        "\n",
        "print(\"Languages:\\nPython\\n\\tC\\njavaScript\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-bOK1HtBgTai",
        "outputId": "ede0e671-b8ab-4a1c-a447-a1325b9f1b27"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Python\n",
            "\tPython\n",
            "Languages:\n",
            "Python\n",
            "C\n",
            "javaScript\n",
            "Languages:\n",
            "Python\n",
            "\tC\n",
            "javaScript\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#stripping whitespace\n",
        "fav_lang = 'python'\n",
        "fav_lang\n",
        "# R stripe method (Eliminate whitespace on right side)\n",
        "fav_lang.rstrip()\n",
        "fav_lang = fav_lang.rstrip()\n",
        "\n",
        "#L strip (Removes whitespace permanently)\n",
        "fav_lang\n",
        "fav_lang.lstripe()\n",
        "fav_lang.strip()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "JP4v3XJWhZ-P",
        "outputId": "d4add2bc-7fc1-42ca-80b4-2ad65b2db067"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'python'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "url = \"https://www.google:8080)\"\n",
        "url.removeprefix('http://')\n",
        "url.removesuffix(':8080')\n",
        "url = url.removeprefix('https://').removesuffix(':8080')\n",
        "url"
      ],
      "metadata": {
        "id": "kwyZsQPViSbC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Exercise (try it yourself)"
      ],
      "metadata": {
        "id": "-32HZvRkjIlw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from re import X\n",
        "#personal message 2-3\n",
        "print(\"hello, Eric, would you like to learn some python today\")\n",
        "\n",
        "#name cases 2-4\n",
        "name = \"joe\"\n",
        "print(name.title())\n",
        "print(name.upper())\n",
        "print(name.lower())\n",
        "\n",
        "#famous quote 2-5 \n",
        "print(\"Travis scott once said 'it's lit' \")\n",
        "\n",
        "#famous quote 2-6\n",
        "message = \"Travis scott \"\n",
        "print(message + \"once said 'it's lit' \")\n",
        "\n",
        "#stripping names 2-7\n",
        "Name = \"joe\"\n",
        "print(Name)\n",
        "print(\"\\tName\")\n",
        "print(\"\\nName\")\n",
        "print(name.lstrip())\n",
        "print(name.rstrip())\n",
        "print(name.strip())\n",
        "\n",
        "#file extensions 2-8\n",
        "filename = 'python_notes.txt'\n",
        "filename.removesuffix('txt')\n",
        "\n",
        "\n",
        "# Number eight 2-9\n",
        "print(2 ** 3)\n",
        "print(1 + 7)\n",
        "print(2 * 4)\n",
        "\n",
        "# favorite number 2-10 \n",
        "favorite_number = 66\n",
        "print('my favorite number is ' + str(favorite_number))\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "id": "B5OQ2y2fivEZ",
        "outputId": "d9847307-79ef-4ede-abae-658dd092b06a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hello, Eric, would you like to learn some python today\n",
            "Joe\n",
            "JOE\n",
            "joe\n",
            "Travis scott once said 'it's lit' \n",
            "Travis scott once said 'it's lit' \n",
            "joe\n",
            "\tName\n",
            "\n",
            "Name\n",
            "joe\n",
            "joe\n",
            "joe\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-58-fa4b9b08dd04>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     27\u001b[0m \u001b[0;31m#file extensions 2-8\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m \u001b[0mfilename\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'python_notes.txt'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 29\u001b[0;31m \u001b[0mfilename\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mremovesuffix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'txt'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     30\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'str' object has no attribute 'removesuffix'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#numbers\n",
        "2 + 3\n",
        "3 - 2 \n",
        "2 * 3\n",
        "3 / 2\n",
        "3 ** 2\n",
        "3 ** 3\n",
        "10 ** 6 \n",
        "2 + 3 * 4\n",
        "(2 + 3) * 4"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LJt-fKnekPKW",
        "outputId": "04e8f262-f2f7-4048-b1de-2c53917d87e8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "20"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#floats \n",
        "0.1 + 0.1\n",
        "3.0 * 0.1\n",
        "\n",
        "\n",
        " #underscore \n",
        "million = 1_000_000\n",
        "million\n",
        "billion = 1000_000_000\n",
        "billion"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "su0GU3O6kwDe",
        "outputId": "1e7fa8f1-ccd6-4175-b2fd-1861181e8dca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1000000000"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "BAz7XCJ7kzOb"
      }
    }
  ]
}